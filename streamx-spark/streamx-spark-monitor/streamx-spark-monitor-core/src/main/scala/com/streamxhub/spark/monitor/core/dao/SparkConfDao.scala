/**
  * Copyright 2011-2015 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
package com.streamxhub.spark.monitor.core.dao

import com.streamxhub.spark.monitor.core.domain.SparkConf
import org.mybatis.scala.mapping.Binding._
import org.mybatis.scala.mapping._
import org.mybatis.scala.session.Session

import scala.language.postfixOps

object SparkConfDao {

  val SELECT_SQL =
    """
      |SELECT *
      |FROM item
    """.stripMargin

  val insert = new Insert[SparkConf] {
    def xsql =
      <xsql>
        INSERT INTO item(description_, info_, year_)
        VALUES (
        {"description" ?}
        ,
        {?("info", jdbcType = JdbcType.VARCHAR)}
        ,
        {?("year", jdbcType = JdbcType.INTEGER)}
        )
      </xsql>
  }

  val update = new Update[SparkConf] {
    def xsql =
      <xsql>
        UPDATE item
        SET
        description_ =
        {"description" ?}
        ,
        info_ =
        {?("info", jdbcType = JdbcType.VARCHAR)}
        ,
        year_ =
        {?("year", jdbcType = JdbcType.INTEGER)}
        WHERE id_ =
        {"id" ?}
      </xsql>
  }

  val dropTable = new Perform {
    def xsql =
      <xsql>
        DROP TABLE IF EXISTS item
      </xsql>
  }

  val createTable = new Perform {
    def xsql =
      <xsql>
        CREATE TABLE item (
        id_ INTEGER GENERATED BY DEFAULT AS IDENTITY,
        description_ varchar(255) not null,
        info_ varchar(255),
        year_ integer,
        primary key (id_)
        )
      </xsql>
  }

  def initdb(implicit s: Session) = {
    dropTable()
    createTable()
  }

  def bind = Seq(createTable, dropTable, update, insert)

}
